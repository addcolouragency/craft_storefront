"use strict";

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _baseService = _interopRequireDefault(require("./base-service"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * The interface that all fulfillment services must inherit from. The intercace
 * provides the necessary methods for creating, authorizing and managing
 * fulfillment orders.
 * @interface
 */
var BaseFulfillmentService = /*#__PURE__*/function (_BaseService) {
  _inherits(BaseFulfillmentService, _BaseService);

  var _super = _createSuper(BaseFulfillmentService);

  function BaseFulfillmentService() {
    _classCallCheck(this, BaseFulfillmentService);

    return _super.call(this);
  }

  _createClass(BaseFulfillmentService, [{
    key: "getIdentifier",
    value: function getIdentifier() {
      return this.constructor.identifier;
    }
    /**
     * Called before a shipping option is created in Admin. The method should
     * return all of the options that the fulfillment provider can be used with,
     * and it is here the distinction between different shipping options are
     * enforced. For example, a fulfillment provider may offer Standard Shipping
     * and Express Shipping as fulfillment options, it is up to the store operator
     * to create shipping options in Medusa that can be chosen between by the
     * customer.
     */

  }, {
    key: "getFulfillmentOptions",
    value: function getFulfillmentOptions() {}
    /**
     * Called before a shipping method is set on a cart to ensure that the data
     * sent with the shipping method is valid. The data object may contain extra
     * data about the shipment such as an id of a drop point. It is up to the
     * fulfillment provider to enforce that the correct data is being sent
     * through.
     * @param {object} data - the data to validate
     * @param {object} cart - the cart to which the shipping method will be applied
     * @return {object} the data to populate `cart.shipping_methods.$.data` this
     *    is usually important for future actions like generating shipping labels
     */

  }, {
    key: "validateFulfillmentData",
    value: function validateFulfillmentData(data, cart) {
      throw Error("validateFulfillmentData must be overridden by the child class");
    }
    /**
     * Called before a shipping option is created in Admin. Use this to ensure
     * that a fulfillment option does in fact exist.
     */

  }, {
    key: "validateOption",
    value: function validateOption(data) {
      throw Error("validateOption must be overridden by the child class");
    }
  }, {
    key: "canCalculate",
    value: function canCalculate(data) {
      throw Error("canCalculate must be overridden by the child class");
    }
    /**
     * Used to calculate a price for a given shipping option.
     */

  }, {
    key: "calculatePrice",
    value: function calculatePrice(data, cart) {
      throw Error("calculatePrice must be overridden by the child class");
    }
  }, {
    key: "createFulfillment",
    value: function createFulfillment() {
      throw Error("createOrder must be overridden by the child class");
    }
    /**
     * Used to retrieve documents associated with a fulfillment.
     * Will default to returning no documents.
     */

  }, {
    key: "getFulfillmentDocuments",
    value: function getFulfillmentDocuments(data) {
      return [];
    }
    /**
     * Used to create a return order. Should return the data necessary for future
     * operations on the return; in particular the data may be used to receive
     * documents attached to the return.
     */

  }, {
    key: "createReturn",
    value: function createReturn(fromData) {
      throw Error("createReturn must be overridden by the child class");
    }
    /**
     * Used to retrieve documents related to a return order.
     */

  }, {
    key: "getReturnDocuments",
    value: function getReturnDocuments(data) {
      return [];
    }
    /**
     * Used to retrieve documents related to a shipment.
     */

  }, {
    key: "getShipmentDocuments",
    value: function getShipmentDocuments(data) {
      return [];
    }
  }]);

  return BaseFulfillmentService;
}(_baseService["default"]);

var _default = BaseFulfillmentService;
exports["default"] = _default;