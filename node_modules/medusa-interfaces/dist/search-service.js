"use strict";

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _baseService = _interopRequireDefault(require("./base-service"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * The interface that all search services must implement.
 * @interface
 */
var SearchService = /*#__PURE__*/function (_BaseService) {
  _inherits(SearchService, _BaseService);

  var _super = _createSuper(SearchService);

  function SearchService() {
    _classCallCheck(this, SearchService);

    return _super.call(this);
  }
  /**
   * Used to create an index
   * @param indexName {string} - the index name
   * @param [options] {string} - the index name
   * @return {Promise<{object}>} - returns response from search engine provider
   */


  _createClass(SearchService, [{
    key: "createIndex",
    value: function createIndex(indexName, options) {
      throw Error("createIndex must be overridden by a child class");
    }
    /**
     * Used to get an index
     * @param indexName {string} - the index name.
     * @return {Promise<{object}>} - returns response from search engine provider
     */

  }, {
    key: "getIndex",
    value: function getIndex(indexName) {
      throw Error("getIndex must be overridden by a child class");
    }
    /**
     * Used to index documents by the search engine provider
     * @param indexName {string} - the index name
     * @param documents {Array.<Object>} - documents array to be indexed
     * @param type {Array.<Object>} - type of documents to be added (e.g: products, regions, orders, etc)
     * @return {Promise<{object}>} - returns response from search engine provider
     */

  }, {
    key: "addDocuments",
    value: function addDocuments(indexName, documents, type) {
      throw Error("addDocuments must be overridden by a child class");
    }
    /**
     * Used to replace documents
     * @param indexName {string} - the index name.
     * @param documents {Object} - array of document objects that will replace existing documents
     * @param type {Array.<Object>} - type of documents to be replaced (e.g: products, regions, orders, etc)
     * @return {Promise<{object}>} - returns response from search engine provider
     */

  }, {
    key: "replaceDocuments",
    value: function replaceDocuments(indexName, documents, type) {
      throw Error("updateDocument must be overridden by a child class");
    }
    /**
     * Used to delete document
     * @param indexName {string} - the index name
     * @param document_id {string} - the id of the document
     * @return {Promise<{object}>} - returns response from search engine provider
     */

  }, {
    key: "deleteDocument",
    value: function deleteDocument(indexName, document_id) {
      throw Error("deleteDocument must be overridden by a child class");
    }
    /**
     * Used to delete all documents
     * @param indexName {string} - the index name
     * @return {Promise<{object}>} - returns response from search engine provider
     */

  }, {
    key: "deleteAllDocuments",
    value: function deleteAllDocuments(indexName) {
      throw Error("deleteAllDocuments must be overridden by a child class");
    }
    /**
     * Used to search for a document in an index
     * @param indexName {string} - the index name
     * @param query {string} - the search query
     * @param options {{ paginationOptions: { limit: number, offset: number }, filter: any, additionalOptions: any}}
     * - any options passed to the request object other than the query and indexName
     * - additionalOptions contain any provider specific options
     * @return {Promise<{ hits: any[]; [k: string]: any; }>} returns response from search engine provider
     */

  }, {
    key: "search",
    value: function search(indexName, query, options) {
      throw Error("search must be overridden by a child class");
    }
    /**
     * Used to update the settings of an index
     * @param indexName {string} - the index name
     * @param settings {object} - settings object
     * @return {Promise<{object}>} - returns response from search engine provider
     */

  }, {
    key: "updateSettings",
    value: function updateSettings(indexName, settings) {
      throw Error("updateSettings must be overridden by a child class");
    }
  }]);

  return SearchService;
}(_baseService["default"]);

var _default = SearchService;
exports["default"] = _default;