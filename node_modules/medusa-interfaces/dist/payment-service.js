"use strict";

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _baseService = _interopRequireDefault(require("./base-service"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * The interface that all payment services must inherit from. The intercace
 * provides the necessary methods for creating, authorizing and managing
 * payments.
 * @interface
 */
var BasePaymentService = /*#__PURE__*/function (_BaseService) {
  _inherits(BasePaymentService, _BaseService);

  var _super = _createSuper(BasePaymentService);

  function BasePaymentService() {
    _classCallCheck(this, BasePaymentService);

    return _super.call(this);
  }

  _createClass(BasePaymentService, [{
    key: "getIdentifier",
    value: function getIdentifier() {
      return this.constructor.identifier;
    }
    /**
     * Used to create a payment to be processed with the service's payment gateway.
     * @param cart {object} - the cart that the payment should cover.
     * @return {Promise<{object}>} - returns a promise that resolves to an object
     * containing the payment data. This data will be saved to the cart for later
     * use.
     */

  }, {
    key: "createPayment",
    value: function createPayment(cart) {
      throw Error("createPayment must be overridden by the child class");
    }
    /**
     * Used to retrieve a payment.
     * @param cart {object} - the cart whose payment should be retrieved.
     * @return {Promise<{object}>} - returns a promise that resolves to the
     * payment object as stored with the provider.
     */

  }, {
    key: "retrievePayment",
    value: function retrievePayment(cart) {
      throw Error("getPayment must be overridden by the child class");
    }
    /**
     * Used to update a payment. This method is called when the cart is updated.
     * @param cart {object} - the cart whose payment should be updated.
     * @return {Promise<{object}>} - returns a promise that resolves to the
     * payment object as stored with the provider.
     */

  }, {
    key: "updatePayment",
    value: function updatePayment(cart) {
      throw Error("updatePayment must be overridden by the child class");
    }
  }, {
    key: "getStatus",
    value: function getStatus() {
      throw Error("getStatus must be overridden by the child class");
    }
  }, {
    key: "authorizePayment",
    value: function authorizePayment() {
      throw Error("authorizePayment must be overridden by the child class");
    }
  }, {
    key: "capturePayment",
    value: function capturePayment() {
      throw Error("capturePayment must be overridden by the child class");
    }
  }, {
    key: "refundPayment",
    value: function refundPayment() {
      throw Error("refundPayment must be overridden by the child class");
    }
  }, {
    key: "deletePayment",
    value: function deletePayment() {
      throw Error("deletePayment must be overridden by the child class");
    }
    /**
     * If the payment provider can save a payment method this function will
     * retrieve them.
     */

  }, {
    key: "retrieveSavedMethods",
    value: function retrieveSavedMethods(customer) {
      return Promise.resolve([]);
    }
  }]);

  return BasePaymentService;
}(_baseService["default"]);

var _default = BasePaymentService;
exports["default"] = _default;